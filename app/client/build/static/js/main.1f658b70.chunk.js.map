{"version":3,"sources":["helpers/toastify.js","helpers/definitions.js","containers/Board/Board.js","helpers/axios.js","containers/Rack/Rack.js","components/ScoreTable/ScoreTable.js","components/WaitingRoom/WaitingRoom.js","components/LandingPage/LandingPage.js","components/JoinGameForm/JoinGameForm.js","components/CreateGameForm/CreateGameForm.js","containers/User/User.js","containers/App.js","index.js"],"names":["Toastify","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","piecesWeight","letterMapping","Board","props","populateModal","pieces","piecesContainer","document","createElement","setAttribute","piece","letter","pieceCont","innerHTML","addEventListener","setState","blankPiece","firstChild","innerText","toggleSelectionModal","appendChild","Object","keys","getElementById","classList","toggle","getTilePositionOnBoard","tile","boardTiles","querySelectorAll","indexOf","call","populateBoard","e","p","bp","updatePlay","data","eventType","name","playedPiece","querySelector","id","remove","elementString","elementPosition","pieceLetter","updateBlankPiece","state","setTimeout","socket","emit","roomID","componentDidMount","event","isTurn","cL","target","includes","isBoardDrag","currentPiece","error","toast","getAttribute","preventDefault","className","style","border","removeAttribute","piecePosition","children","parentNode","index","length","removeChild","prevPiece","on","React","Component","axios","defaults","baseURL","window","serverIP","headers","post","common","b2ctk","interceptors","request","use","console","log","Promise","reject","response","makeServerRequest","opts","requestType","url","payload","then","r","catch","Rack","getPiecesAbove","words","loopLength","isBoardEdge","ind","getWordFromPiece","split","reverse","join","getPiecesDown","updatePlayWeight","tileClasses","pieceClasses","word","playWeights","push","getPiecesLeft","getPiecesRight","textContent","slice","getValueFromPiece","parseInt","position","getPlayedWords","playedPieces","wrdV","wrdH","allwords","playDirection","getPlayDirection","cachedDirection","forEach","computeScore","validWords","score","mul","s","weight","a","playTurn","getPlayedPieces","validateBoardPlay","resp","remainingPieces","getPiecesOnRack","getFromBag","currentPieces","populateRack","skipTurn","confirm","recallPieces","isTurnSkipped","swapPieces","dirCount","topmost","i","isValidPlay","boardIsEmpty","validateNearestNeighbours","getValidPlayCount","checkIfPlayWasCentered","validCount","indexLeft","indexUp","indexDown","indexRight","tilesToCheck","pieceTilePosition","tileIndex","confirmed","makeDraw","playOrder","inPlaceShuffle","players","drawButton","amount","clearPlayedPieces","shufflePieces","arr","j","Math","floor","random","temp","value","rack","entries","alphabet","pieceContainer","toggleBag","bagItems","bagHome","updateBag","info","onClick","this","bagLength","title","isHost","ScoreTable","map","player","key","WaitingRoom","hostMessage","connectedPlayers","numOfPlayers","role","aria-label","playerMessage","room","LandingPage","registerHost","showJoinForm","JoinGameForm","type","onChange","saveUser","placeholder","saveID","marginRight","joinRoom","marginLeft","showHome","CreateGameForm","savePlayers","defaultValue","startGame","GameUser","concretizePlayedPieces","showJoin","display","toString","rooms","io","transports","gameStarted","isReconnection","allPlayers","firsToPlayMessage","firstToPlay","playOrderMessage","warn","node","welcomeMessage","success","turnMessage","message","playerToPlay","scoreDiv","crypto","getRandomValues","Uint32Array","gameConfig","gameComponents","App","ReactDOM","render","StrictMode"],"mappings":"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sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,yBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,sBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,mBAEf,yBAAKA,UAAU,uBAGnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBAEf,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","file":"static/js/main.1f658b70.chunk.js","sourcesContent":["import 'react-toastify/dist/ReactToastify.css';\nimport {ToastContainer} from 'react-toastify';\nimport React from 'react';\n\nconst Toastify = () => {\n    return (<ToastContainer\n        autoClose={8000} // 8 seconds\n        hideProgressBar\n        newestOnTop={true}\n        closeOnClick={false}\n        rtl={false}\n        pauseOnVisibilityChange\n        draggable\n        pauseOnHover={true}/>)\n}\nexport default Toastify;","// Constants used throughout the app\n\n// const specialTiles = ['dW', 'dL', 'tL', 'tW'];\nconst piecesWeight = {\n    'A': 1,\n    'B': 3,\n    'C': 3,\n    'D': 2,\n    'E': 1,\n    'F': 4,\n    'G': 2,\n    'H': 4,\n    'I': 1,\n    'J': 8,\n    'K': 5,\n    'L': 1,\n    'M': 3,\n    'N': 1,\n    'O': 1,\n    'P': 3,\n    'Q': 10,\n    'R': 1,\n    'S': 1,\n    'T': 1,\n    'U': 1,\n    'V': 4,\n    'W': 4,\n    'X': 8,\n    'Y': 4,\n    'Z': 10\n};\nconst  letterMapping = {\n    'dL': 2,\n    'tL': 3,\n    'dW': 2,\n    'tW': 3\n};\n\nexport {letterMapping};\nexport {piecesWeight};","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { piecesWeight } from '../../helpers/definitions';\n\nclass Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            blankPiece: '',\n            currentPiece: null,\n            isBoardDrag: false\n        }\n    }\n\n    populateModal = (pieces) => {\n        // Create container element\n        let piecesContainer = document.createElement('div');\n        piecesContainer.setAttribute('class', 'bagPieceContainer');\n\n        // Create the pieces and eventually append to the parent\n        // container. State/props has them as an array\n        for (const letter of Object.keys(pieces)) {\n            let piece;\n\n            let pieceCont = document.createElement('div');\n            pieceCont.setAttribute('class', 'bagPieceItem');\n\n            piece = `<div class='piece'><span class=\"letter\">${letter}</span></div>`;\n            pieceCont.innerHTML = piece;\n\n            // Add click event listener to all, signifying choice of transformation\n            // of blank piece\n            pieceCont.addEventListener('click', () => {\n                this.setState({ blankPiece: pieceCont.firstChild.firstChild.innerText });\n                this.toggleSelectionModal();\n            });\n\n            piecesContainer.appendChild(pieceCont);\n        }\n        document.getElementById('selectionHome').appendChild(piecesContainer);\n    }\n\n    toggleSelectionModal = () => {\n        // Actually show (toggle) modal\n        document.getElementById('selectionModal').classList.toggle('is-active');\n    }\n\n    getTilePositionOnBoard = (tile) => {\n        // All the tiles on the board\n        const boardTiles = document.querySelectorAll('.tile');\n\n        // For each tile on the board, get the one that matches\n        // the passed tile\n        return [].indexOf.call(boardTiles, tile);\n    }\n\n    populateBoard = (e, p) => {\n        let bp = document.createElement('div');\n        bp.setAttribute('id', `jp_${p}`);\n        bp.setAttribute('class', 'bp');\n        bp.innerHTML = e;\n        document.querySelectorAll('.tile')[p].appendChild(bp);\n    }\n\n    // Callback to handle sio events\n    updatePlay = (data) => {\n        // For events that happen when a piece is moved from one\n        // position on the board to another. Exclude thyself\n        if (data.eventType === 'drag') {\n            if (data.name !== this.props.name) {\n                let playedPiece = document.querySelector(`#${data.id}`);\n                if (playedPiece !== null) {\n                    playedPiece.remove();\n                }\n            }\n        }\n        else if (data.eventType === 'rackToBoard') {\n            if (data.name !== this.props.name) {\n                this.populateBoard(data.elementString, data.elementPosition);\n            }\n        }\n        // Implicit updateBlank. Expand as needed\n        else {\n            document.getElementById(data.id).firstChild.firstChild.innerText = data.pieceLetter;\n        }\n    }\n\n    updateBlankPiece = (id) => {\n        if (this.state.blankPiece === '') {\n            setTimeout(() => {\n                this.updateBlankPiece(id);\n            }, 200);\n        }\n        else {\n            // Emit to everybody and then reset\n            let pieceLetter = this.state.blankPiece;\n            this.props.socket.emit('inPlayEvent', {\n                roomID: this.props.roomID,\n                pieceLetter: pieceLetter,\n                eventType: 'updateBlank',\n                id: id,\n            });\n            this.setState({ blankPiece: '' });\n        }\n    }\n\n    componentDidMount = () => {\n        // Populate the selectionModal\n        this.populateModal(piecesWeight);\n\n        /* Events fired on the drag target */\n\n        // When a piece is initially moved, from rack or board\n        document.addEventListener(\"dragstart\", (event) => {\n            if (this.props.isTurn) {\n                try {\n                    let cL = [...event.target.classList]\n                    if (cL.includes('pieceContainer') || cL.includes('bp')) {\n                        // A piece having a classname with 'bp' is originated\n                        // from the board itself, signifying a drag\n                        if (cL.includes('bp')) {\n                            this.setState({ isBoardDrag: true });\n                        }\n                        this.setState({ currentPiece: event.target });\n                    }\n                } catch (error) {\n                    toast.error(`Invalid drag motion.`);\n                }\n            }\n            else {\n                // If it's a drag that's associated with a scrabble piece. Warn to wait\n                if (event.target.getAttribute('draggable')) {\n                    toast.error(`It's not your turn, ${this.props.name}. Kindly wait your turn.`);\n                }\n            }\n        });\n\n        /* Events fired on the drop target */\n\n        // When the draggable element enters the droptarget, change the border style\n        document.addEventListener(\"dragenter\", (event) => {\n            event.preventDefault();\n            if (this.props.isTurn) {\n                if (event.target.className.includes('droppable')) {\n                    event.target.style.border = \"0.4px solid yellow\";\n                }\n            }\n        });\n\n        // By default, data/elements cannot be dropped in other elements. \n        // To allow a drop, we must prevent the default handling of the element\n        document.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n        });\n\n        // When the draggable element leaves the droptarget, reset the style\n        document.addEventListener(\"dragleave\", (event) => {\n            if (this.props.isTurn) {\n                event.target.removeAttribute('style');\n            }\n        });\n\n        document.addEventListener(\"drop\", (event) => {\n            event.preventDefault();\n            if (this.props.isTurn) {\n                event.target.removeAttribute('style'); //  Reset the border\n                let piece = this.state.currentPiece;\n                if (event.target.className.includes('droppable') && piece !== null) {\n                    let cL = [...piece.classList]\n                    // Register only for valid movements. Avoid stuff like\n                    // a mistakenly-made drag or a bare tile drag\n                    if (cL.includes('pieceContainer') || cL.includes('bp')) {\n                        // Get the position of the tile the piece was dropped in\n                        let piecePosition = this.getTilePositionOnBoard(event.target);\n\n                        // Make a new parent element with a custom class and duplicate the\n                        // contents of the current piece to it, and then add it as a child \n                        // to the tile where it is placed\n                        let bp = document.createElement('div');\n                        bp.setAttribute('draggable', 'true');\n                        bp.setAttribute('id', `jp_${piecePosition}`);\n                        bp.setAttribute('class', 'bp');\n\n                        // Piece is a blank? \n                        if (piece.firstChild.firstChild.innerText === \"\") {\n                            // Show modal for selection\n                            this.toggleSelectionModal();\n                            this.updateBlankPiece(`jp_${piecePosition}`);\n                        }\n\n                        // Make piece appear on board\n                        bp.innerHTML = piece.innerHTML;\n                        event.target.appendChild(bp);\n\n                        // If it's a board drag i.e the user is shifting the position of the\n                        // piece whilst still playing on the board\n                        if (this.state.isBoardDrag) {\n                            let children = piece.parentNode.children; // Get all the children of the source tile\n                            // Special tiles (dL, tW, etc) will have more than one children (one for the actual message and\n                            // the other for the piece that was previously on it). Normal tiles will have just one child.\n                            // We want to remove the just the piece from the tile. So, get an index based on the length of the children.\n                            let index = children.length === 1 ? 0 : 1;\n                            // Remove appropriately\n                            piece.parentNode.removeChild(children[index]);\n\n                            // Reset \n                            this.setState({ isBoardDrag: false });\n\n                            // Reflect on other players' boards \n                            // that a board-drag happened\n                            this.props.socket.emit('inPlayEvent', {\n                                roomID: this.props.roomID,\n                                name: this.props.name,\n                                eventType: 'drag',\n                                id: piece.id,\n                            });\n                        }\n                        // Implicit movement of tile from rack to board\n                        else {\n                            // The rack pieces can be deleted, as they have been duplicated on the board\n                            let prevPiece = document.getElementById(piece.id);\n                            if (prevPiece) { prevPiece.remove() };\n                        }\n                        // Reflect on other players' boards that a rack-event\n                        // happened\n                        this.props.socket.emit('inPlayEvent', {\n                            name: this.props.name,\n                            eventType: 'rackToBoard',\n                            roomID: this.props.roomID,\n                            elementString: bp.innerHTML,\n                            elementPosition: piecePosition\n                        });\n                        // Reset\n                        this.setState({ currentPiece: null });\n                    }\n                }\n            }\n        });\n\n        /* Register Socket.io Event Listener */\n\n        // Replicate the play event, regardless of the type\n        this.props.socket.on('inPlay', (data) => {\n            this.updatePlay(data);\n        });\n    }\n\n    render() {\n        return (\n            <div className='boardContainer'>\n                <div id=\"selectionModal\" className=\"modal\">\n                    <div className=\"modal-background\"></div>\n                    <div className=\"modal-card bagItems\">\n                        <section id=\"selectionHome\" className=\"modal-card-body\">\n                        </section>\n                    </div>\n                </div>\n                <div className=\"board\">\n                    <div className='row'>\n                        <div className=\"droppable tile tW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tW\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile tW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW cT\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tW\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className=\"droppable tile tW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tW\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile dL\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile\">\n                        </div>\n                        <div className=\"droppable tile tW\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Board;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `http://${window.serverIP}:5005/api/v1`;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.common['Authorization'] = `Bearer ${window.b2ctk}`;\n\naxios.interceptors.request.use(request => {\n    // console.log(request);\n    // Edit request config\n    return request;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n    // console.log(response);\n    // Edit response config\n    return response;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\nconst makeServerRequest = (opts) => {\n    // Payload is params for GET and same for POST\n    return axios[opts.requestType](opts.url, opts.payload)\n        .then(r => r.data)\n        .catch(e => console.log(e.data));\n}\n\nexport default makeServerRequest;","import React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport makeServerRequest from '../../helpers/axios';\nimport { letterMapping, piecesWeight } from '../../helpers/definitions';\n\nexport class Rack extends Component {\n    constructor(props) {\n        super(props);\n\n        this.playWeights = [];\n        this.boardTiles = null;\n\n        this.state = {\n            currentPieces: []\n        }\n    }\n\n    // Returns the pieces above the piece at index\n    getPiecesAbove = (index) => {\n        let words = \"\";\n        let loopLength = 15;\n        let position = 'top';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index - loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words += this.getWordFromPiece(tile.firstChild);\n                loopLength += 15;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return words.split(\"\").reverse().join(\"\");\n    }\n\n    // Returns the pieces below the piece at index\n    getPiecesDown = (index) => {\n        let words = \"\";\n        let loopLength = 15;\n        let position = 'down';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index + loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words += this.getWordFromPiece(tile.firstChild);\n                loopLength += 15;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break;\n            }\n        }\n        return words\n    }\n\n    // Saves the current play's weight. Essentially means to record whether\n    // the play had stuff like dL, tW, etc.\n    updatePlayWeight = (tileClasses, pieceClasses, word) => {\n        if (pieceClasses.includes('bp') && tileClasses.includes('dL')) {\n            this.playWeights.push([word, 'dL'])\n        }\n        else if (pieceClasses.includes('bp') && tileClasses.includes('tL')) {\n            this.playWeights.push([word, 'tL'])\n        }\n        else if (pieceClasses.includes('bp') && tileClasses.includes('dW')) {\n            this.playWeights.push([word, 'dW'])\n        }\n        else if (pieceClasses.includes('bp') && tileClasses.includes('tW')) {\n            this.playWeights.push([word, 'tW'])\n        }\n    }\n\n    // Returns the pieces on the left of the piece at index\n    getPiecesLeft = (index) => {\n        let words = \"\";\n        let loopLength = 1;\n        let position = 'left';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index - loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words += this.getWordFromPiece(tile.firstChild);\n                loopLength += 1;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'll\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break\n            }\n        }\n        return words.split(\"\").reverse().join(\"\");\n    }\n\n    // Returns the pieces on the right of the piece at index\n    getPiecesRight = (index) => {\n        let words = \"\";\n        let loopLength = 1;\n        let position = 'right';\n\n        if (this.isBoardEdge(position, index)) {\n            return words;\n        }\n\n        while (true) {\n            let ind = index + loopLength;\n            let tile = this.boardTiles[ind];\n            if (tile.firstChild !== null) {\n                words += this.getWordFromPiece(tile.firstChild);\n                loopLength += 1;\n                // After getting the letter, check if the piece is at\n                // the edge of the board. If it is, then exit, as there'''\n                // be nothing in the next position.\n                if (this.isBoardEdge(position, ind)) {\n                    break;\n                }\n            }\n            else {\n                break\n            }\n\n        }\n        return words\n    }\n\n    // Returns the character (letter), given a piece \n    getWordFromPiece = (piece) => {\n        let letter = piece.firstChild.textContent.slice(0, 1);\n        return letter;\n    }\n    // Returns the value (integer), given a piece \n    getValueFromPiece = (piece) => {\n        let value = parseInt(piece.firstChild.textContent.slice(1));\n        return value;\n    }\n\n    // Returns if a passed in tile and position is at\n    // the edge of the board in said position\n    isBoardEdge = (position, index) => {\n        if (position === 'down') {\n            return index >= 0 && index < 15;\n        }\n        else if (position === 'top') {\n            return index > 209 && index < 225;\n        }\n        else if (position === 'left') {\n            return (index % 15) === 0;\n        }\n        else { // Implicit right\n            return (index % 15) === 14;\n        }\n    }\n\n    /* Should return the valid words played. These will eventually be weighted\n    amounting to the final play score */\n    getPlayedWords = (playedPieces) => {\n        let allwords = []; // Storage for all the played words\n        let wrdV, wrdH, playDirection = this.getPlayDirection.cachedDirection;\n\n        playedPieces.forEach((piece, index) => {\n            let tile = this.getTilePositionOnBoard(piece.parentNode);\n            let letter = this.getWordFromPiece(this.boardTiles[tile]);\n            let tileClasses = [...this.boardTiles[tile].classList];\n            let pieceClasses = [...piece.classList];\n\n            this.updatePlayWeight(tileClasses, pieceClasses, letter);\n\n            // The first piece that's played, in the playing direction, would have all the words\n            // played in that direction. So, for the very first piece, get the pieces played in all\n            // directions\n            if (index === 0) {\n                wrdH = `${this.getPiecesLeft(tile)}${letter}${this.getPiecesRight(tile)}`;\n                // Validate only words with at least two characters\n                if (wrdH.length > 1) {\n                    allwords.push(wrdH);\n                }\n                wrdV = `${this.getPiecesAbove(tile)}${letter}${this.getPiecesDown(tile)}`;\n                if (wrdV.length > 1) {\n                    allwords.push(wrdV);\n                }\n            }\n            // While for the others, get only those opposite the playing direction\n            else {\n                if (playDirection === 'right') {\n                    wrdV = `${this.getPiecesAbove(tile)}${letter}${this.getPiecesDown(tile)}`;\n                    if (wrdV.length > 1) {\n                        allwords.push(wrdV);\n                    }\n                }\n                else {\n                    wrdH = `${this.getPiecesLeft(tile)}${letter}${this.getPiecesRight(tile)}`;\n                    if (wrdH.length > 1) {\n                        allwords.push(wrdH);\n                    }\n                }\n            }\n        });\n        return allwords;\n    }\n\n    computeScore = (validWords) => { // Can do better than O(n)3\n        let score = 0;\n        // For each word\n        validWords.forEach(word => {\n            let mul = 1; // Assign a default multiplier\n            // For each string in each word\n            [...word].forEach(s => {\n                // Get the associated weight with the string\n                let weight = piecesWeight[s];\n                // For each weighted play, previously identified\n                this.playWeights.forEach(a => {\n                    // If the strings are equal\n                    if (s === a[0]) {\n                        // Confirm the type of weighted play and \n                        // update accordingly\n                        if (['dL', 'tL'].includes(a[1])) {\n                            weight *= letterMapping[a[1]];\n                        }\n                        else if (['tW', 'dW'].includes(a[1])) {\n                            mul = letterMapping[a[1]];\n                        }\n                    }\n                });\n                score = score + weight;\n            });\n            score = score * mul;\n        });\n        return score;\n    }\n\n    playTurn = () => {\n        // You can, of course, only play when it's your turn\n        if (this.props.isTurn) {\n            // Reset the played weights per turn\n            this.playWeights = [];\n\n            // Get pieces that were played\n            let playedPieces = this.props.getPlayedPieces();\n\n            // Check if the player has played anything\n            if ((playedPieces.length) > 0) {\n                // Validate board play based on Scrabble's rules\n                if (!this.validateBoardPlay(playedPieces)) {\n                    toast.error(\"Sorry, that's an invalid move.\");\n                    return;\n                }\n\n                // Validate words, compute score, and announce to everybody\n                let validWords = this.getPlayedWords(playedPieces);\n\n                let wordValidation = makeServerRequest({\n                    requestType: 'post',\n                    url: '/words-check',\n                    payload: { words: validWords }\n                });\n\n                wordValidation.then(resp => {\n                    // Invalid word is contained in the response payload\n                    // Announce invalid word and exit\n                    if (resp.error) {\n                        toast.error(resp.error);\n                        return;\n                    }\n\n                    // Implicit that all words are valid\n\n                    // If validated, then get what's on the rack. This\n                    // will need to be refilled\n                    let remainingPieces = this.getPiecesOnRack();\n\n                    // Compute score\n                    let score = this.computeScore(validWords);\n\n                    // Get new pieces and Refill player's rack\n                    let newPieces = this.getFromBag(playedPieces.length);\n\n                    // Refill rack\n                    newPieces.then((data) => {\n                        data.pieces.forEach(piece => remainingPieces.push(piece));\n                    }).then(() => {\n                        this.setState({ currentPieces: remainingPieces });\n                        this.populateRack(remainingPieces);\n                        // Publish score [among other things] to everyone\n                        this.props.socket.emit('playEvent', {\n                            roomID: this.props.roomID,\n                            name: this.props.name,\n                            score: score,\n                            word: validWords[0]\n                        });\n                    });\n                });\n\n            }\n            else {\n                toast.error(\"Err...You haven't played anything. You can alternatively skip your turn.\");\n                return;\n            }\n        }\n    }\n\n    skipTurn = () => {\n        if (this.props.isTurn) {\n            let confirmed = window.confirm(\"Are you sure you want to skip your turn?\");\n            if (confirmed) {\n                this.recallPieces();\n                this.props.socket.emit('playEvent', {\n                    isTurnSkipped: true,\n                    name: this.props.name,\n                    roomID: this.props.roomID,\n                });\n            }\n        }\n    }\n\n    swapPieces = () => {\n        // tbd\n    }\n\n    getPlayDirection = (playedPieces) => {\n        let dirCount = 0;\n        let playDirection = 'down'; // Default; assumed\n        let topmost = this.getTilePositionOnBoard(playedPieces[0].parentNode);\n\n        // Essentially, since each row on the board has a length of 15,\n        // go round the board 15 times, effectively making your destination\n        // just one tile away from the current tile. If during that journey,\n        // a tile is found with a child having the identifiable class of a \n        // just-played piece ('bp'), the surely, the play direction was right\n        for (let i = 1; i < 16; i++) {\n            let index = topmost + i;\n            // End of the board. If play direction hasn't been detected as right,\n            // then it's implicitly down\n            if (index > 224) {\n                break;\n            }\n            let piece = this.boardTiles[index].firstChild;\n\n            // Here, the play direction is gotten, and if, at the last\n            // index (at the tile directly below the main tile), a piece\n            // with a currently-playing class is found, then add 15 (just\n            // an identifier for the eventual check to come). This confirms \n            // that the user played in two directions, which is not allowed\n            // in Scrabble\n            if (piece !== null) {\n                if ([...piece.classList].includes('bp')) {\n                    if (i === 15) {\n                        dirCount += 15;\n                        playDirection = 'down';\n                    }\n                    else {\n                        dirCount += 1;\n                        playDirection = 'right';\n                    }\n                }\n            }\n        }\n\n        // If two directions were detected, invaidate the entire\n        // thing\n        if (dirCount > 15) {\n            return false;\n        }\n        return playDirection;\n    }\n\n    validateBoardPlay = (playedPieces) => {\n        let isValidPlay = false;\n        let boardIsEmpty = document.querySelectorAll('.vP').length === 0;\n\n        // Implicit down playDirection. \n        // Looping 15 times takes you to the tile directly below\n        let loopLength = 15;\n\n        // If only one piece was played\n        if (playedPieces.length === 1) {\n            // If the player was first to play (and played just one)\n            // Invalidate it. [S]he has to play at least two letters,\n            // according to the official Scrabble rules\n            if (boardIsEmpty) {\n                return false;\n            }\n            // If the game had been ongoing, ensure there's a neighbour\n            else {\n                isValidPlay = this.validateNearestNeighbours(playedPieces) >= 1;\n            }\n        }\n        else { // 2 or more pieces were played\n            let playDirection = this.getPlayDirection(playedPieces);\n\n            // Validate that the play direction didn't oscillate between the two\n            // options\n            if (playDirection === false) {\n                return false;\n            }\n            // Simple cache for reuse. This is always called before the \n            // reuser\n            this.getPlayDirection.cachedDirection = playDirection;\n\n            if (playDirection === 'right') {\n                loopLength = 1;\n            }\n\n            // The first to play doesn't meet any valid plays\n            // when [s]he plays.  The consequent players do\n            if (!boardIsEmpty) {\n\n                if (this.validateNearestNeighbours(playedPieces) < 1) {\n                    return false;\n                }\n\n                let validCount = this.getValidPlayCount(playedPieces, loopLength, boardIsEmpty);\n                if (validCount < (playedPieces.length - 1)) {\n                    return false;\n                }\n\n                isValidPlay = true;\n            }\n            else {\n                // All of them should be valid\n                let validCount = this.getValidPlayCount(playedPieces, loopLength, boardIsEmpty);\n                if (validCount < (playedPieces.length - 1)) {\n                    return false;\n                }\n\n                // Check all the played pieces' positions. At least one \n                // must be on the center tile\n                isValidPlay = this.checkIfPlayWasCentered(playedPieces);\n            }\n        }\n        // Return validation result\n        return isValidPlay;\n    }\n\n    validateNearestNeighbours = (playedPieces) => {\n        let validCount = 0;\n\n        playedPieces.forEach(piece => {\n            let tilesToCheck = [];\n            let indexLeft, indexUp, indexDown, indexRight;\n            let pieceTilePosition = this.getTilePositionOnBoard(piece.parentNode);\n\n            // Get the indices of the tiles at the top, left, right,\n            // and bottom of the played piece. Eventually, at least\n            // one of them must point to a validated play piece\n            indexUp = pieceTilePosition - 15;\n            indexLeft = pieceTilePosition - 1;\n            indexDown = pieceTilePosition + 15;\n            indexRight = pieceTilePosition + 1;\n\n            // The rules of Scrabble are such that after the very first play, every subsequent\n            // play must be linked either through the top, left, bottom or right, with a previously \n            // played tile. \n            // At the top of the board (top left), the pieces play on the very first row do not have any \n            // indexes up (they themselves are the very least indices). Conversely, at the bottom of the \n            // board, (bottom right), the pieces played on the very bottom row do not have any indexes at\n            // the bottom because they themselves are the most indices. The below blocks checks these and\n            // ensures only the right tiles are eventually checked\n            if (indexUp >= 0) {\n                tilesToCheck.push(this.boardTiles[indexUp]);\n            }\n            if (indexLeft >= 0) {\n                tilesToCheck.push(this.boardTiles[indexLeft]);\n            }\n            if (indexDown <= 224) {\n                tilesToCheck.push(this.boardTiles[indexDown]);\n            }\n            if (indexRight <= 224) {\n                tilesToCheck.push(this.boardTiles[indexRight]);\n            }\n\n            // Check all the played pieces' positions. At least one must be \n            // linked (top, left, bottom, right) to a previously-played \n            // piece. That's how Scrabble works\n            tilesToCheck.forEach((tile) => {\n                if (tile.firstChild !== null) {\n                    if ([...tile.firstChild.classList].includes('vP')) {\n                        validCount += 1;\n                    }\n                }\n            });\n        });\n\n        return validCount;\n    }\n\n    getValidPlayCount = (playedPieces, loopLength, boardIsEmpty) => {\n        let condition;\n        let validCount = 0;\n\n        playedPieces.forEach((piece, index) => {\n            if ((index + 1) !== playedPieces.length) {\n                // Get the tile for the piece by the playDirection\n                let tileIndex = this.getTilePositionOnBoard(piece.parentNode);\n                let tile = this.boardTiles[tileIndex + loopLength];\n\n                // If it doesn't have a first child, then no new piece was appended to it\n                // Invalidate the play\n                if (tile.firstChild === null) {\n                    return false;\n                }\n                // Get the classlist of the piece by the playDirection\n                let pieceClasses = [...tile.firstChild.classList];\n\n                condition = boardIsEmpty ?\n                    pieceClasses.includes('bp') :\n                    condition = pieceClasses.includes('bp') || pieceClasses.includes('vP');\n\n                // Includes either\n                if (condition) {\n                    validCount += 1;\n                }\n            }\n        });\n\n        return validCount;\n    }\n\n    checkIfPlayWasCentered = (playedPieces) => {\n        let confirmed = false;\n\n        playedPieces.forEach(piece => {\n            // Get the tile for the piece\n            let tile = this.boardTiles[this.getTilePositionOnBoard(piece.parentNode)];\n            // Center tile has a class of 'cT'. Check against this\n            if ([...tile.classList].includes('cT')) {\n                confirmed = true;\n            }\n        });\n\n        return confirmed;\n    }\n\n    getTilePositionOnBoard = (tile) => {\n        // For each tile on the board, get the one that matches\n        // the passed tile\n        return [].indexOf.call(this.boardTiles, tile);\n    }\n\n    makeDraw = (e) => {\n        // Select a random player to start from all the players\n        e.preventDefault();\n\n        // Shuffle all the players. The resulting order is the order\n        // with which the players will take turns\n        let playOrder = this.inPlaceShuffle(this.props.players);\n\n        // Tell the others who gets to play first\n        this.props.socket.emit('drawEvent', {\n            playOrder: playOrder,\n            roomID: this.props.roomID\n        });\n\n        // Remove the draw button, as the draw has been done\n        let drawButton = document.getElementById('drawButton');\n        if (drawButton !== null) {\n            drawButton.remove();\n        }\n    }\n\n    getFromBag = (amount) => {\n        // Get passed amount from bag\n        let pieces = makeServerRequest({\n            payload: {},\n            requestType: 'get',\n            url: `/bag/${amount}`\n        });\n        return pieces;\n    }\n\n    clearPlayedPieces = () => {\n        // Clear the board of all played pieces.\n        // Defined separately to allow for `recallPieces()` reuse\n        let playedPieces = this.props.getPlayedPieces();\n        if (playedPieces.length > 0) {\n            playedPieces.forEach((piece) => piece.remove())\n        }\n    }\n\n    shufflePieces = () => {\n        // Get the pieces on the rack\n        let pieces = this.getPiecesOnRack();\n\n        // Shuffle and update rack\n        this.populateRack(this.inPlaceShuffle(pieces));\n    }\n\n    recallPieces = () => {\n        // Current implementation is to remove all pieces played on the board\n        // and then re-create the initial rack pieces.\n\n        // It has to be your turn for this function to work\n        if (this.props.isTurn) {\n            this.props.socket.emit('recallEvent', {\n                name: this.props.name,\n                roomID: this.props.roomID\n            })\n            this.clearPlayedPieces();\n            this.populateRack(this.state.currentPieces);\n        }\n    }\n\n    inPlaceShuffle = (arr) => {\n        // https://stackoverflow.com/cant-remember\n\n        for (let i = arr.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return arr;\n    }\n\n    getPiecesOnRack = () => {\n        // Storage for the pieces on the rack\n        let pieces = [];\n\n        // For each piece in the rack, get the letter and value and then\n        // store each one in the above array.\n        document.querySelectorAll('.pieceContainer').forEach((piece) => {\n            pieces.push({\n                letter: piece.textContent.slice(0, 1),\n                value: parseInt(piece.textContent.slice(1))\n            });\n        });\n\n        return pieces;\n    }\n\n    populateRack = (pieces) => {\n        let rack = document.querySelector('.rackPieces');\n        while (rack.firstChild) {\n            rack.firstChild.remove();\n        }\n        for (const [index, alphabet] of Object.entries(pieces)) {\n            let piece;\n            let pieceContainer = document.createElement('div');\n            pieceContainer.setAttribute('id', `userPiece${index}`);\n            pieceContainer.setAttribute('class', 'pieceContainer');\n            pieceContainer.setAttribute('draggable', 'true');\n            piece = `<div draggable=\"false\" class='piece'><span draggable=\"false\" class=\"letter\">${alphabet.letter}</span><span draggable=\"false\" class=\"value\">${alphabet.value}</span></div>`;\n            pieceContainer.innerHTML = piece;\n            rack.appendChild(pieceContainer);\n        }\n    }\n\n    toggleBag = () => {\n        // Validate that the bag has been updated (happens once the draw is done)\n        if (Object.keys(this.props.bagItems).length === 0) {\n            toast.info(\"Kindly wait until the draw has been made.\");\n            return;\n        }\n\n        // Get the modal section and populate it with the bag items \n        // from the props\n        let bagHome = document.getElementById('bagHome');\n        // Reset the bag\n        bagHome.innerHTML = \"\"\n        bagHome.appendChild(this.updateBag(this.props.bagItems));\n\n        // Actually show (toggle) modal\n        document.getElementById('bagModal').classList.toggle('is-active');\n    }\n\n    updateBag = (pieces) => {\n        // Create container element\n        let piecesContainer = document.createElement('div');\n        piecesContainer.setAttribute('class', 'bagPieceContainer');\n\n        // Create the pieces and eventually append to the parent\n        // container. State/props has them as an array\n        for (const letter of pieces) {\n            let piece;\n\n            let pieceCont = document.createElement('div');\n            pieceCont.setAttribute('class', 'bagPieceItem');\n\n            piece = `<div><div class='piece'><span class=\"letter\">${letter[0]}</span></div></div>\n            <div class=\"numberLeft\"><span>${letter[1]} left</span></div>`;\n\n            pieceCont.innerHTML = piece;\n            piecesContainer.appendChild(pieceCont);\n        }\n        return piecesContainer;\n    }\n\n    /* Features for Game save. Tbd\n    beforeUnload = () => {\n        let rack = this.getPiecesOnRack();\n        let snapshot = this.takeBoardSnapshot();\n        makeServerRequest({\n            requestType: 'post',\n            url: `/snapshot/${this.props.roomID}`,\n            payload = {\n                rack: rack,\n                boardshot: boardshot,\n                name: this.props.name\n            },\n        });\n    }\n    \n    takeBoardSnapshot = () => { // to be tested\n        let boardState = [];\n        this.boardTiles.forEach((piece, index) => {\n            if (piece.firstChild !== null) {\n                if ([...piece.firstChild.classList].includes('vP')) {\n                    boardState.push({\n                        letter: piece.firstchild.textContent.slice(0, 1),\n                        value: parseInt(piece.firstchild.textContent.slice(1)),\n                        index: index\n                    });\n                }\n            }\n        });\n\n        return boardState;\n    }\n    \n    // window.addEventListener('beforeunload', this.beforeUnload);\n\n    componentWillUnmount = () => {\n        window.removeEventListener('beforeunload', this.beforeUnload);\n    }\n    */\n\n    componentDidMount = () => {\n        // Assign global variable\n        this.boardTiles = document.querySelectorAll('.tile');\n\n        // Register for event to effect a recall when a player does \n        // that. Effects reflection among all players\n        this.props.socket.on('recallPieces', (data) => {\n            if (data.name !== this.props.name) {\n                this.clearPlayedPieces();\n            }\n        });\n\n        // Get new pieces, update the state and populate the rack\n        let newPieces = this.getFromBag(7 - this.state.currentPieces.length);\n        newPieces.then((data) => {\n            this.setState({ currentPieces: data.pieces },\n                () => { this.populateRack(this.state.currentPieces) });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"rack\">\n                <div id=\"bagModal\" className=\"modal\">\n                    <div onClick={this.toggleBag} className=\"modal-background\"></div>\n                    <div className=\"modal-card bagItems\">\n                        <section id=\"bagHome\" className=\"modal-card-body\">\n                        </section>\n                    </div>\n                </div>\n                <div className=\"rackPieces\">\n                </div>\n                <div className='rackButtons'>\n                    <div onClick={this.toggleBag} className='bag'>\n                        <span><i className=\"fa fa-shopping-bag fa-2x\"></i></span>\n                        <span className=\"bagLength\">{this.props.bagLength}</span>\n                    </div>\n                    <div className=\"buttons is-fullwidth has-addons\">\n                        <button title=\"Recall Pieces\" onClick={this.recallPieces} className=\"button rackButton is-link\"><i className=\"fas fa-undo\"></i></button>\n                        <button title=\"Shuffle Pieces\" onClick={this.shufflePieces} className=\"button rackButton is-link\"><i className=\"fas fa-random\"></i></button>\n                        <button title=\"Swap Pieces\" onClick={this.swapPieces} className=\"button rackButton is-link\"><i className=\"fas fa-exchange-alt\"></i></button>\n                        <button title=\"Skip Turn\" onClick={this.skipTurn} className=\"button rackButton is-link\"><i className=\"fas fa-forward\"></i></button>\n                        <button title=\"Play\" className=\"button rackButton is-success\" onClick={this.playTurn}><i className=\"fas fa-play\"></i></button>\n                        {this.props.isHost ?\n                            <button id=\"drawButton\" title=\"Draw\" className=\"button rackButton is-warning\" onClick={this.makeDraw}>Draw</button>\n                            : null}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Rack;\n","import React from 'react';\n\nconst ScoreTable = (props) => {\n    let players = props.players.map((player, index) => {\n        return <tr key={index}>\n            <td>{props.name === player ? `${player} (You)` : player}</td>\n            <td id={`score_${player}`}>0</td>\n            <td id={`turn_${player}`}>No</td>\n        </tr>;\n    });\n    return (\n        <div className=\"scoresTable\">\n            <table className=\"table is-hoverable is-stripped is-fullwidth is-bordered\">\n                <thead>\n                    <tr>\n                        <th>Player</th>\n                        <th>Score</th>\n                        <th>Turn?</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {players}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default ScoreTable;\n","import React from 'react'\n\nfunction WaitingRoom(props) {\n    let hostMessage = (\n        <div>\n            <div>Connected players: <b>{props.connectedPlayers}/{props.numOfPlayers}</b></div>\n            <hr />\n            <div className=\"subtitle is-7\">\n                <span role='img' aria-label=\"info\">⚠️</span> Don't forget to share your Game ID with the other players you want to join your game session.\n            </div>\n        </div>);\n    let playerMessage = (\n        <div>\n            <div>You're in the waiting room. The game will start once all players like you have joined the host's session.</div>\n        </div>\n    )\n    let room = (\n        <div className=\"waitingMessage\">\n            <div className=\"centralize title is-5\">\n                <span>Waiting for all players to join...</span>\n            </div>\n            <hr />\n            <div>Your name: <b>{props.name}</b></div>\n            <div>Game ID: <b>{props.roomID}</b></div>\n            {props.isHost ? hostMessage : playerMessage}\n        </div>\n    );\n    return (\n        <div>\n            {room}\n        </div>\n    )\n}\n\nexport default WaitingRoom;\n","import React from 'react'\n\nfunction LandingPage(props) {\n    return (\n        <div className='landing'>\n            <div className=\"title centralize\">\n                SCRABBLE\n        </div>\n            <div className=\"field is-grouped\">\n                <div className=\"control\">\n                    <button onClick={props.registerHost} className=\"button mainButton is-success\">Host Game</button>\n                </div>\n                <div className=\"control\">\n                    <button onClick={props.showJoinForm} className=\"button mainButton is-link\">Join Game</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LandingPage;\n","import React from 'react'\n\nfunction JoinGameForm(props) {\n    return (\n        <div className='joinForm'>\n            <form>\n                <div className=\"field\">\n                    <label className=\"label\">Your Name: <span className=\"imp\">*</span></label>\n                    <div className=\"control\">\n                        <input className=\"input\" type='text' onChange={props.saveUser} name='name' placeholder='e.g. Smeagol' />\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <div className=\"field is-expanded\">\n                        <label className=\"label\">Game ID: <span className=\"imp\">*</span></label>\n                        <div className=\"field has-addons\">\n                            <p className=\"control\">\n                                <span className=\"button is-static\">\n                                    SC-\n                                </span>\n                            </p>\n                            <div className=\"control\">\n                                <input className=\"input\" type='text' onChange={props.saveID} name='gameID' placeholder='e.g. 903318' />\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                <div className='centralize field is-grouped is-grouped-centered'>\n                    <button style={{ marginRight: '5px' }} className=\"button optionButton is-fullwidth is-link\" onClick={props.joinRoom}>Join</button>\n                    <button style={{ marginLeft: '5px' }} className=\"button optionButton is-fullwidth is-light\" onClick={props.showHome}>Cancel</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default JoinGameForm;\n","import React from 'react'\n\nfunction CreateGameForm(props) {\n    return (\n        <div className='configForm'>\n            <form>\n                <div className=\"field\">\n                    <label className=\"label\">Your Name: <span className=\"imp\">*</span> </label>\n                    <div className=\"control\">\n                        <input className=\"input\" type='text' onChange={props.saveUser} name='text' placeholder='e.g: Orihime' />\n                    </div>\n                </div>\n                <div className=\"control\">\n                    <div className=\"select is-fullwidth\">\n                        <select onChange={props.savePlayers} >\n                            <option value='' defaultValue>Choose the number of players</option>\n                            <option value='2'>2</option>\n                            <option value='3'>3</option>\n                            <option value='4'>4</option>\n                        </select>\n                    </div>\n                </div>\n                <br />\n                <div className='centralize field is-grouped is-grouped-centered'>\n                    <button style={{ marginRight: '5px' }} className=\"button optionButton is-fullwidth is-link\" onClick={props.startGame}>Start</button>\n                    <button style={{ marginLeft: '5px' }} className=\"button optionButton is-fullwidth is-light\" onClick={props.showHome}>Cancel</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateGameForm;\n","import React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport io from 'socket.io-client';\nimport Board from '../Board/Board';\nimport Rack from '../Rack/Rack';\nimport makeServerRequest from '../../helpers/axios';\nimport ScoreTable from '../../components/ScoreTable/ScoreTable';\nimport WaitingRoom from '../../components/WaitingRoom/WaitingRoom';\nimport LandingPage from '../../components/LandingPage/LandingPage';\nimport JoinGameForm from '../../components/JoinGameForm/JoinGameForm';\nimport CreateGameForm from '../../components/CreateGameForm/CreateGameForm';\n\n\nexport default class GameUser extends Component {\n    constructor(props) {\n        super(props);\n\n        this.numOfPlayers = 0;\n        this.socket = io(`http://${window.serverIP}:5005`, { transports: ['websocket'] });\n\n        // Randomly generated id that represents the game room, just in case the client\n        // decides to be a game session host\n        this.roomID = `SC-${window.crypto.getRandomValues(new Uint32Array(1))[0].toString().slice(0, 6)}`;\n\n        this.state = {\n            name: '',\n            roomID: '',\n            players: [],\n            bagItems: {},\n            isTurn: false,\n            isHost: false,\n            bagLength: 100,\n            gameStarted: false,\n            connectedPlayers: 0,\n        }\n    }\n\n    getPlayedPieces = () => {\n        return document.querySelectorAll('.bp');\n    }\n\n    concretizePlayedPieces = () => {\n        // Make all the pieces permanent. Do this, essentially, \n        // by removing their identifiable class\n        let playedPieces = this.getPlayedPieces();\n        if (playedPieces.length > 0) {\n            playedPieces.forEach((piece) => {\n                // Remove previously identifiable attrs.\n                piece.removeAttribute('class');\n                piece.removeAttribute('id');\n                // Add class of validated play (vP)\n                piece.setAttribute('class', 'vP');\n                piece.setAttribute('draggable', false);\n                piece.parentNode.setAttribute('draggable', false);\n            });\n        }\n    }\n\n    showJoin = () => {\n        document.querySelector('.landing').style.display = 'none';\n        document.querySelector('.joinForm').style.display = 'block';\n    }\n\n    registerHost = () => {\n        if (!this.state.isHost) {\n            this.setState({ isHost: true, roomID: this.roomID });\n        }\n\n        document.querySelector('.landing').style.display = 'none';\n        document.querySelector('.configForm').style.display = 'block';\n    }\n\n    saveID = (event) => {\n        this.setState({ roomID: `SC-${event.target.value}`.toString() })\n    }\n\n    saveUser = (event) => {\n        this.setState({ name: event.target.value })\n    }\n\n    savePlayers = (event) => {\n        this.numOfPlayers = parseInt(event.target.value);\n    }\n\n    startGame = (e) => {\n        e.preventDefault();\n\n        // Name should be at least three letters\n        if (this.state.name.length < 3) {\n            toast.error(\"Kindly enter a longer name. Don't be shy.\");\n            return;\n        }\n        // Number of players must be two, three or four\n        if (![2, 3, 4].includes(this.numOfPlayers)) {\n            toast.error(\"Kindly select a valid number of players\");\n            return;\n        }\n        document.querySelector('.configForm').style.display = 'none';\n        document.querySelector('.waitingMessage').style.display = 'block';\n        this.socket.emit('join', { name: this.state.name, roomID: this.roomID });\n    }\n\n    joinRoom = (e) => {\n        e.preventDefault();\n\n        // Name should be at least three letters\n        if (this.state.name.length < 3) {\n            toast.error(\"Kindly enter a longer name. Don't be shy.\");\n            return;\n        }\n        // Game IDs must be nine characters\n        if (this.state.roomID.length !== 9) {\n            toast.error(\"Sorry, that's an invalid Game ID.\");\n            return;\n        }\n\n        // Get all the current game session IDs and validate\n        // that the inputted Game ID is valid \n        let gameIDs = makeServerRequest({ requestType: 'get', url: '/rooms', payload: {} });\n        gameIDs.then(data => {\n            // Validate\n            if (!data.rooms.includes(this.state.roomID)) {\n                toast.error(`😬 There's currently no game session with ID, ${this.state.roomID}.`);\n                return;\n            }\n\n            // Join the room\n            this.socket.emit('join', { name: this.state.name, roomID: this.state.roomID });\n            // Show waiting room\n            document.querySelector('.joinForm').style.display = 'none';\n            document.querySelector('.waitingMessage').style.display = 'block';\n        });\n    }\n\n    showHome = (e) => {\n        e.preventDefault();\n        this.setState({ isHost: false, name: '' }) // Essentially a reset\n        this.numOfPlayers = 0;\n\n        document.querySelector('.landing').style.display = 'block';\n        document.querySelector('.joinForm').style.display = 'none';\n        document.querySelector('.configForm').style.display = 'none';\n    }\n\n    componentDidMount = () => {\n        // Hide some configs initially\n        document.querySelector('.waitingMessage').style.display = 'none';\n        document.querySelector('.joinForm').style.display = 'none';\n        document.querySelector('.configForm').style.display = 'none';\n        document.querySelector('.entry').style.display = 'none';\n\n        /* Register event listeners */\n\n        // Incase socket.io loses connection to the server\n        this.socket.on('reconnect_attempt', () => {\n            this.socket.io.opts.transports = ['polling', 'websocket'];\n            document.getElementById('connstatus').setAttribute('title', \"Reconnecting...\");\n            document.getElementById('connstatus').setAttribute('class', 'has-text-warning');\n        });\n\n        // On connect\n        this.socket.on('connect', () => {\n            document.getElementById('connstatus').setAttribute('title', \"Server Connection: Good\");\n            document.getElementById('connstatus').setAttribute('class', 'has-text-success');\n            if (this.state.gameStarted) {\n                this.socket.emit('join', { roomID: this.roomID, isReconnection: true });\n            }\n        });\n\n        // On disconnect\n        this.socket.on('disconnect', () => {\n            if (this.state.gameStarted) {\n                toast.error(\"Lost connection to the game server. Trying to reconnect...\");\n            }\n            document.getElementById('connstatus').setAttribute('title', \"Connection Lost\");\n            document.getElementById('connstatus').setAttribute('class', 'has-text-danger');\n        });\n\n        // When a new player joins (host or not)\n        this.socket.on('joinedRoom', (data) => {\n            // Save the player's name and update the number of\n            // connected players. For the host, this happens \n            // immediately the game starts\n            this.setState({\n                players: [...this.state.players, data.name],\n                connectedPlayers: this.state.connectedPlayers + 1,\n            }, () => {\n                // If the client is the host and the number of connected players\n                // is the same as the number of required players, then announce\n                // that the game has started. Also send all the registered players\n                // to everybody so they can update their state\n                if (this.state.isHost && (this.state.connectedPlayers === this.numOfPlayers)) {\n                    this.socket.emit('fromHost', {\n                        allPlayers: this.state.players,\n                        roomID: this.state.roomID,\n                        gameStarted: true\n                    });\n                }\n            });\n        });\n\n        // When a draw has been made. Announce who goes first.\n        this.socket.on('drawDone', (data) => {\n            let firstToPlay = data.playOrder[0];\n            let firsToPlayMessage, playOrderMessage = '';\n\n            // Reorder the state's players to match the turn order.\n            // Also note the length of pieces in the bag\n            this.setState({\n                players: data.playOrder,\n                bagLength: data.bagLength,\n                bagItems: data.bagItems\n            });\n\n            if (firstToPlay === this.state.name) {\n                this.setState({ isTurn: true });\n                firsToPlayMessage = `You get to play first`;\n            }\n            else {\n                firsToPlayMessage = `${firstToPlay} gets to play first`;\n            }\n\n            // Show on the score table whose turn it is\n            document.getElementById(`turn_${firstToPlay}`).innerText = 'Yes';\n\n            // Also announce the turn order\n            data.playOrder.forEach((player, index) => {\n                if (player === this.state.name) {\n                    player = `${player} (You)`;\n                }\n                if ((index + 1) === data.playOrder.length) {\n                    playOrderMessage += player;\n                }\n                else {\n                    playOrderMessage += `${player}, then `\n                }\n            });\n\n            toast.warn(`${firsToPlayMessage}. Also note that the turn order is, ${playOrderMessage}.`)\n        });\n\n        // If the game has started, remove the configuration\n        // elements. Then update the state of the connected clients.\n        this.socket.on('gameChannel', (data) => {\n            if (data.gameStarted === true) {\n                // The host already has its name and connected players state up to date\n                // The remainder of the clients don't however. This does the actual update\n                this.setState({\n                    gameStarted: true,\n                    players: !this.state.isHost ? [...data.allPlayers] : [...this.state.players],\n                    connectedPlayers: !this.state.isHost ? data.allPlayers.length : this.state.connectedPlayers,\n                });\n\n                // Unhide main game space and remove the config divs\n                document.querySelector('.entry').removeAttribute('style');\n                document.querySelectorAll('.configElements').forEach((node) => {\n                    node.remove();\n                });\n            }\n\n            let welcomeMessage = this.state.isHost ?\n                \"All players have joined. Make a draw using the yellow button on your button rack. You'll\"\n                :\n                \"The host will make a draw, and you'll\"\n            toast.success(`✨ Welcome, ${this.state.name}! ${welcomeMessage} be notified (just like this) of who gets to play first. Good luck!`)\n        });\n\n        // Register for event to effect an actual valid play\n        this.socket.on('validPlay', (data) => {\n            let turnMessage, message;\n            \n            // Make played pieces permanent for everybody\n            this.concretizePlayedPieces();\n\n            // Update local state upon each play\n            if (data.playerToPlay === this.state.name) {\n                this.setState({\n                    isTurn: true,\n                    bagItems: data.bagItems,\n                    bagLength: data.bagLength,\n                }, () => turnMessage = `your turn to play`);\n            }\n            else {\n                this.setState({\n                    isTurn: false,\n                    bagItems: data.bagItems,\n                    bagLength: data.bagLength,\n                }, () => turnMessage = `${data.playerToPlay}'s turn to play`);\n            }\n\n            // Update turn column on board\n            this.state.players.forEach(player => {\n                if (player === data.playerToPlay) {\n                    document.getElementById(`turn_${player}`).innerText = 'Yes';\n                }\n                else {\n                    document.getElementById(`turn_${player}`).innerText = 'No';\n                }\n            });\n\n            // If a turn is skipped, then there's no score associated with that \n            // turn. Use this as a conditional to render score or turn skipped\n            // message\n            if (data.isTurnSkipped) {\n                message = data.name === this.state.name ?\n                    \"You skipped your turn\" :\n                    message = `Turn skipped by ${data.name}`;\n            }\n            else {\n                // Construct score message\n                message = data.name === this.state.name ?\n                    `You played \"${data.word}\" worth ${data.score} points` :\n                    `${data.name} played \"${data.word}\" worth ${data.score} points`;\n\n                // Update the score board with the score\n                let scoreDiv = document.getElementById(`score_${data.name}`);\n                let score = parseInt(scoreDiv.innerText);\n                scoreDiv.innerText = score + data.score\n            }\n\n            // Announce to everybody\n            toast.info(`${message}. It's ${turnMessage}.`);\n        });\n    }\n\n    render() {\n        let gameConfig =\n            <div className=\"configElements\">\n                <LandingPage registerHost={this.registerHost} showJoinForm={this.showJoin} />\n                <CreateGameForm savePlayers={this.savePlayers}\n                    saveUser={this.saveUser}\n                    showHome={this.showHome}\n                    startGame={this.startGame} />\n                <JoinGameForm saveID={this.saveID}\n                    saveUser={this.saveUser}\n                    joinRoom={this.joinRoom}\n                    showHome={this.showHome} />\n                <WaitingRoom name={this.state.name}\n                    roomID={this.state.roomID}\n                    isHost={this.state.isHost}\n                    numOfPlayers={this.numOfPlayers}\n                    connectedPlayers={this.state.connectedPlayers} />\n            </div>\n        let gameComponents =\n            <div className=\"entry columns is-vcentered\">\n                <div className=\"column is-two-thirds\">\n                    <Board\n                        roomID={this.state.roomID}\n                        socket={this.socket}\n                        name={this.state.name}\n                        isTurn={this.state.isTurn} />\n                </div>\n                <div className=\"column\">\n                </div>\n                <div className=\"column\">\n                </div>\n                <div className=\"column is-one-third\">\n                    <div className=\"extras\">\n                        <div className='connection'>\n                            <span id=\"connstatus\" ><i className=\"fas fa-wifi\"></i></span>&nbsp;\n                        </div>\n                        <ScoreTable socket={this.socket}\n                            name={this.state.name}\n                            players={this.state.players} />\n                        {this.state.gameStarted ?\n                            <Rack socket={this.socket}\n                                name={this.state.name}\n                                roomID={this.state.roomID}\n                                isHost={this.state.isHost}\n                                isTurn={this.state.isTurn}\n                                players={this.state.players}\n                                bagItems={this.state.bagItems}\n                                bagLength={this.state.bagLength}\n                                gameStarted={this.state.gameStarted}\n                                getPlayedPieces={this.getPlayedPieces} /> :\n                            null}\n                    </div>\n                </div>\n            </div>\n        return (\n            <div className='gameSpace'>\n                {gameComponents}\n                {gameConfig}\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ToastContainer from '../helpers/toastify';\nimport GameUser from '../containers/User/User';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <GameUser />\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/roboto.css';\nimport './assets/styles/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}